{"version":3,"sources":["service.js","Navbar/Navbar.jsx","EntityPage/EntityPage.jsx","CreatePage/CreatePage.jsx","EditPage/EditPage.jsx","PersonnelTable/PersonnelTable.jsx","PersonnelEdit/PersonnelEdit.jsx","PersonnelCreate/PersonnelCreate.jsx","RouteTable/RouteTable.jsx","RouteCreate/RouteCreate.jsx","RouteEdit/RouteEdit.jsx","getPersonnelName.js","AutoTable/AutoTable.jsx","AutoCreate/AutoCreate.jsx","AutoEdit/AutoEdit.jsx","JournalTable/JournalTable.jsx","JournalCreate/JournalCreate.jsx","JournalEdit/JournalEdit.jsx","RegistrationPage/RegistrationPage.jsx","App.js","serviceWorker.js","index.js"],"names":["url","opt","a","fetch","Navbar","user","this","props","className","role","aria-label","to","href","id","Component","EntityPage","name","children","CreatePage","EditPage","PersonnelTable","state","mounted","personnelList","Array","doQuery","method","then","setState","prevState","filter","personnel","response","json","from","title","map","key","firstname","lastname","pathername","onClick","handleDelete","PersonnelEdit","handleFirstnameChange","bind","handleLastnameChange","handlePathernameChange","handleSubmit","elem","target","value","JSON","stringify","headers","body","onSubmit","type","placeholder","onChange","required","PersonnelCreate","RouteTable","routeList","route","RouteCreate","handleNameChange","RouteEdit","getPersonnelName","charAt","AutoTable","autoList","auto","num","color","mark","AutoCreate","personnelID","handleNumberChange","handleColorChange","handleMarkChange","handlePersonnelChange","array","length","find","pers","AutoEdit","getAuto","getPersonnelList","selected","JournalTable","journalList","jornal","journal","timeout","toString","timein","JournalCreate","autoID","routeID","handleTimeoutChange","handleTimeinChange","handleAutoChange","handleRouteChange","Date","JournalEdit","RegistrationPage","username","password","handleUsername","handlePassword","roles","App","catch","finally","path","render","match","params","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.009bbff1.chunk.js","sourcesContent":["\"use strict\"\n\nconst DOMAIN = '';//http://localhost:8080\n\nexport async function doQuery(url, opt) {\n    return ( await fetch(DOMAIN + url, opt) );\n};","import React, {Component, Fragment} from 'react';\nimport {\n    BrowserRouter as Router,\n    Link\n} from \"react-router-dom\";\n\nclass Navbar extends Component {\n\n    render() {\n        const {user} = this.props;\n\n        return (\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <Link to=\"/\">\n                    <div className=\"navbar-brand\">\n                        <a className=\"navbar-item subtitle\" href=\"/\">\n                            First\n                        </a>\n                    </div>\n                </Link>\n\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                    {user !== null ? (\n                        <div className=\"navbar-start\">\n                            <span className=\"navbar-item\">\n                                <Link to='/personnels'>\n                                    Personnel\n                                </Link>\n                            </span>\n\n                            <span className=\"navbar-item\">\n                                <Link to='/routes'>\n                                    Route\n                                </Link>\n                            </span>\n\n                            <span className=\"navbar-item\">\n                                <Link to='/autos'>\n                                    Auto\n                                </Link>\n                            </span>\n\n                            <span className=\"navbar-item\">\n                                <Link to='/journals'>\n                                    Journal\n                                </Link>\n                            </span>\n                        </div>\n                    ) : (<div></div>)}\n                    <div className=\"navbar-end\">\n                        {user === null ? (\n                            <div className=\"navbar-item\">\n\n                                <div className=\"buttons\">\n                                    <Link to='/registration'>\n                                        <a className=\"button is-primary\">\n                                            <strong>Sign up</strong>\n                                        </a>\n                                    </Link>\n\n                                    <a className=\"button is-light\" href=\"/login\">\n                                        Log in\n                                    </a>\n                                </div>\n                            </div>\n                        ) : (\n                            <div className=\"navbar-item\">\n                                <div className=\"buttons\">\n                                    <a className=\"button is-light\" href=\"/logout\">\n                                        Logout\n                                    </a>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n};\n\nexport default Navbar;","import React, {Component, Fragment} from 'react';\nimport {Link} from \"react-router-dom\";\n\nclass EntityPage extends Component {\n\n    render() {\n        const {name, url, children} = this.props;\n        return (\n            <Fragment>\n                <div className=\"title\">\n                    {name}\n                </div>\n                <div className=\"subtitle\">\n                    <Link to={`${url}_create`}><a>Create</a></Link>\n                </div>\n                <div>\n                    {children}\n                </div>\n            </Fragment>\n        )\n    }\n\n}\n\nexport default EntityPage;","import React, {Component, Fragment} from 'react';\n\nclass CreatePage extends Component {\n    render() {\n        const {name, children} = this.props;\n\n        return (\n            <Fragment>\n                <div className=\"title\">\n                    {name}\n                </div>\n                {children}\n            </Fragment>\n        )\n    }\n}\n\nexport default CreatePage;","import React, {Component, Fragment} from \"react\";\n\nclass EditPage extends Component {\n    render() {\n        const {name, children} = this.props;\n\n        return (\n            <Fragment>\n                <div className=\"title\">{name}</div>\n                {children}\n            </Fragment>\n        );\n    }\n}\n\nexport default EditPage;","import React, {Component} from 'react';\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass PersonnelTable extends Component {\n    state = {\n        mounted: false,\n        personnelList: Array()\n    }\n\n    url = \"/personnel\";\n\n    handleDelete(id) {\n        const {doQuery} = this.props;\n\n        doQuery(this.url + `/${id}`, {\n            method: \"DELETE\"\n        }).then(() => {\n            this.setState(prevState => {\n                return {personnelList: prevState.personnelList.filter(personnel => personnel.id !== id)}\n            });\n        });\n    }\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery(this.url)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    mounted: true,\n                    personnelList: Array.from(json)\n                });\n            });\n    }\n\n    render() {\n        const {mounted, personnelList} = this.state;\n\n        return mounted ? (\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th><abbr title=\"Position\">Firstname</abbr></th>\n                    <th><abbr title=\"Played\">Lastname</abbr></th>\n                    <th><abbr title=\"Won\">Pathername</abbr></th>\n                </tr>\n                </thead>\n                <tbody>\n                {personnelList.map(personnel =>\n                    <tr key={personnel.id}>\n                        <th>{personnel.firstname}</th>\n                        <th>{personnel.lastname}</th>\n                        <th>{personnel.pathername}</th>\n                        <th><Link to={`${this.url}_edit/${personnel.id}`}>Edit</Link></th>\n                        <th><a onClick={() => this.handleDelete(personnel.id)}>Delete</a></th>\n                    </tr>)}\n                </tbody>\n            </table>\n        ) : (\n            <div>Wait..</div>\n        );\n    }\n}\n\n\nexport default PersonnelTable;","import {\n    useParams\n} from \"react-router-dom\";\nimport React, {Component} from \"react\";\n\nclass PersonnelEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleFirstnameChange = this.handleFirstnameChange.bind(this);\n        this.handleLastnameChange = this.handleLastnameChange.bind(this);\n        this.handlePathernameChange = this.handlePathernameChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        id: null,\n        personnel: null,\n        mounted: false,\n        firstname: '',\n        lastname: '',\n        pathername: ''\n    };\n\n    componentDidMount() {\n        const {id, doQuery} = this.props;\n\n        doQuery(`/personnel/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    id: id,\n                    personnel: json,\n                    mounted: true\n                });\n            });\n    }\n\n    handleFirstnameChange(elem) {\n        this.setState({\n            firstname: elem.target.value\n        })\n    }\n\n    handleLastnameChange(elem) {\n        this.setState({\n            lastname: elem.target.value\n        })\n    }\n\n    handlePathernameChange(elem) {\n        this.setState({\n            pathername: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {id, doQuery} = this.props;\n\n        const {firstname, lastname, pathername} = this.state;\n\n        const json = JSON.stringify({\n            firstname: firstname,\n            lastname: lastname,\n            pathername: pathername\n        });\n\n\n        doQuery(`/personnel/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        })\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    id: id,\n                    personnel: json,\n                });\n            });\n    }\n\n    render() {\n        const {mounted, personnel} = this.state;\n\n        return mounted ? (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Firstname</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\" placeholder={personnel.firstname}\n                               onChange={this.handleFirstnameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Lastname</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\" placeholder={personnel.lastname}\n                               onChange={this.handleLastnameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Pathername</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\" placeholder={personnel.pathername}\n                               onChange={this.handlePathernameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Обновить\"/>\n            </form>\n        ) : (\n            <div>Wait</div>\n        );\n    }\n}\n\nexport default PersonnelEdit;","import React, {Component} from 'react';\n\nclass PersonnelCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleFirstnameChange = this.handleFirstnameChange.bind(this);\n        this.handleLastnameChange = this.handleLastnameChange.bind(this);\n        this.handlePathernameChange = this.handlePathernameChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        firstname: '',\n        lastname: '',\n        pathername: ''\n    };\n\n    handleFirstnameChange(elem) {\n        this.setState({\n            firstname: elem.target.value\n        })\n    }\n\n    handleLastnameChange(elem) {\n        this.setState({\n            lastname: elem.target.value\n        })\n    }\n\n    handlePathernameChange(elem) {\n        this.setState({\n            pathername: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n\n        const {firstname, lastname, pathername} = this.state;\n\n        const json = JSON.stringify({\n            firstname: firstname,\n            lastname: lastname,\n            pathername: pathername\n        });\n\n\n        doQuery(`/personnel`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Firstname</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               onChange={this.handleFirstnameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Lastname</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               onChange={this.handleLastnameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Pathername</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               onChange={this.handlePathernameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Создать\"/>\n            </form>\n        );\n    }\n}\n\nexport default PersonnelCreate;","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass RouteTable extends Component {\n\n    state = {\n        routeList: Array(),\n        mounted: false\n    }\n\n    url = '/route';\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery(this.url)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    routeList: json,\n                    mounted: true\n                });\n            });\n    }\n\n    handleDelete(id) {\n        const {doQuery} = this.props;\n\n        doQuery(`${this.url}/${id}`, {\n            method: 'DELETE'\n        }).then(() => {\n                this.setState(prevState => {\n                    return {\n                        routeList: prevState.routeList.filter(route => route.id !== id),\n                    }\n                });\n            });\n    }\n\n    render() {\n        const {mounted, routeList} = this.state;\n\n        return mounted ?\n            (\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th><abbr title=\"Position\">Name</abbr></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {routeList.map(route =>\n                        <tr key={route.id}>\n                            <th>{route.name}</th>\n                            <th><Link to={`${this.url}_edit/${route.id}`}>Edit</Link></th>\n                            <th><a onClick={() => this.handleDelete(route.id)}>Delete</a></th>\n                        </tr>)}\n                    </tbody>\n                </table>\n            ) : (\n                <div>Wait..</div>\n            );\n    }\n}\n\nexport default RouteTable;","import React, {Component} from \"react\";\n\nclass RouteCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        name: ''\n    };\n\n    handleNameChange(elem) {\n        this.setState({\n            name: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n\n        const {name} = this.state;\n\n        const json = JSON.stringify({\n            name: name\n        });\n\n        doQuery(`/route`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Name</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               onChange={this.handleNameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Создать\"/>\n            </form>\n        );\n    }\n}\n\nexport default RouteCreate;","import React, {Component} from 'react';\n\nclass RouteEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        name: '',\n        route: null,\n        mounted: false\n    };\n\n    componentDidMount() {\n        const {id, doQuery} = this.props;\n\n        doQuery(`/route/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    id: id,\n                    route: json,\n                    mounted: true\n                });\n            });\n    }\n\n    handleNameChange(elem) {\n        this.setState({\n            name: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery, id} = this.props;\n\n        const {name} = this.state;\n\n        const json = JSON.stringify({\n            name: name\n        });\n\n        doQuery(`/route/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        }).then(response => response.json())\n            .then(json => {\n                this.setState({\n                    route: json,\n                })\n            });\n    }\n\n    render() {\n        const {mounted, route} = this.state;\n\n        return mounted ? (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Name</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\" placeholder={route.name}\n                               onChange={this.handleNameChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Обновить\"/>\n            </form>\n        ) : (\n            <div>WAIT...</div>\n        );\n    }\n}\n\nexport default RouteEdit;","'use strict';\n\nexport function getPersonnelName(personnel) {\n    if (personnel == null) {\n        return 'none';\n    }\n    return `${personnel.lastname} ${personnel.firstname.charAt(0)} ${personnel.pathername.charAt(0)}`\n}","import React, {Component, Fragment} from 'react';\nimport {getPersonnelName} from \"../getPersonnelName.js\";\nimport {Link} from \"react-router-dom\";\n\nclass AutoTable extends Component {\n\n    url = \"/auto\";\n\n    state = {\n        autoList: Array(),\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery(this.url)\n            .then(response => response.json())\n            .then(json => {\n                this.setState(\n                    {\n                        autoList: Array.from(json),\n                        mounted: true\n                    }\n                )\n            });\n    }\n\n    handleDelete(id) {\n        const {doQuery} = this.props;\n\n        doQuery(`/auto/${id}`, {\n            method: 'DELETE'\n        }).then(() => {\n            this.setState(prevState => {\n                return {\n                    autoList: prevState.autoList.filter(auto => auto.id !== id)\n                }\n            });\n        });\n    }\n\n    render() {\n        const {autoList, mounted} = this.state;\n\n        return mounted ? (\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th><abbr title=\"Position\">Number</abbr></th>\n                    <th><abbr title=\"Played\">Color</abbr></th>\n                    <th><abbr title=\"Won\">Mark</abbr></th>\n                    <th><abbr title=\"Won\">Personnel</abbr></th>\n                </tr>\n                </thead>\n                <tbody>\n                {autoList.map(auto =>\n                    <tr key={auto.id}>\n                        <th>{auto.num}</th>\n                        <th>{auto.color}</th>\n                        <th>{auto.mark}</th>\n                        <th>{getPersonnelName(auto.personnel)}</th>\n                        <th><Link to={`${this.url}_edit/${auto.id}`}>Edit</Link></th>\n                        <th><a onClick={() => this.handleDelete(auto.id)}>Delete</a></th>\n                    </tr>)}\n                </tbody>\n            </table>\n        ) : (\n            <Fragment>\n                Wait...\n            </Fragment>\n        );\n    }\n}\n\nexport default AutoTable;","import React, {Component, Fragment} from 'react';\nimport {getPersonnelName} from \"../getPersonnelName.js\";\n\nclass AutoCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNumberChange = this.handleNumberChange.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n        this.handleMarkChange = this.handleMarkChange.bind(this);\n        this.handlePersonnelChange = this.handlePersonnelChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        personnelList: Array(),\n        num: '',\n        color: '',\n        mark: '',\n        personnelID: '',\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery('/personnel')\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    personnelList: array,\n                    personnelID: array.length === 0 ? '' : array[0].id,\n                    mounted: true\n                });\n            });\n    }\n\n    handleNumberChange(elem) {\n        this.setState({\n            num: elem.target.value\n        })\n    }\n\n    handleColorChange(elem) {\n        this.setState({\n            color: elem.target.value\n        })\n    }\n\n    handleMarkChange(elem) {\n        this.setState({\n            mark: elem.target.value\n        })\n    }\n\n    handlePersonnelChange(elem) {\n        this.setState({\n            personnelID: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n\n        const {num, color, mark, personnelID, personnelList} = this.state;\n\n        const json = JSON.stringify({\n            num: num,\n            color: color,\n            mark: mark,\n            personnel: personnelList.find(pers => pers.id == personnelID)\n        });\n\n        doQuery(`/auto`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    render() {\n        const {mounted, personnelList} = this.state;\n\n        return mounted ? (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Number</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               onChange={this.handleNumberChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Color</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               onChange={this.handleColorChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Mark</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               onChange={this.handleMarkChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Personnel</label>\n                    <div className=\"control\">\n                        <select className=\"select\"\n                                onChange={this.handlePersonnelChange}\n                                required={true}\n                        >\n                            {personnelList.map(personnel =>\n                                <option key={personnel.id} value={personnel.id}>{getPersonnelName(personnel)}</option>)}\n                        </select>\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Создать\"/>\n            </form>\n        ) : (\n            <Fragment>\n                Wait...\n            </Fragment>\n        );\n    }\n}\n\nexport default AutoCreate;","import React, {Component} from \"react\";\nimport {getPersonnelName} from \"../getPersonnelName\";\n\nclass AutoEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNumberChange = this.handleNumberChange.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n        this.handleMarkChange = this.handleMarkChange.bind(this);\n        this.handlePersonnelChange = this.handlePersonnelChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        auto: null,\n        personnelList: Array(),\n        num: '',\n        color: '',\n        mark: '',\n        personnelID: '',\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {doQuery, id} = this.props;\n\n        this.getAuto(id, doQuery)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    auto: json,\n                    personnelID: json.personnel.id,\n                    mounted: true\n                });\n            })\n\n        this.getPersonnelList(doQuery)\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    personnelList: array\n                });\n            });\n    }\n\n    getAuto(id, doQuery) {\n        return doQuery(`/auto/${id}`);\n    }\n\n    getPersonnelList(doQuery) {\n        return doQuery('/personnel');\n    }\n\n    handleNumberChange(elem) {\n        this.setState({\n            num: elem.target.value\n        })\n    }\n\n    handleColorChange(elem) {\n        this.setState({\n            color: elem.target.value\n        })\n    }\n\n    handleMarkChange(elem) {\n        this.setState({\n            mark: elem.target.value\n        })\n    }\n\n    handlePersonnelChange(elem) {\n        this.setState({\n            personnelID: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n\n        const {num, color, mark, personnelID, personnelList, auto} = this.state;\n\n        const json = JSON.stringify({\n            num: num,\n            color: color,\n            mark: mark,\n            personnel: personnelList.find(pers => pers.id == personnelID)\n        });\n\n        doQuery(`/auto/${auto.id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    render() {\n        const {auto, personnelList, mounted} = this.state;\n\n        return mounted ? (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Number</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               placeholder={auto.num}\n                               onChange={this.handleNumberChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Color</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               placeholder={auto.color}\n                               onChange={this.handleColorChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Mark</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"text\"\n                               placeholder={auto.mark}\n                               onChange={this.handleMarkChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Personnel</label>\n                    <div className=\"control\">\n                        <select className=\"select\"\n                                onChange={this.handlePersonnelChange}\n                                required={true}\n                        >\n                            {personnelList.map(personnel =>\n                                <option key={personnel.id} value={personnel.id} selected={personnel.id === auto.personnel.id}>{getPersonnelName(personnel)}</option>)}\n                        </select>\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Изменить\"/>\n            </form>\n        ) : (\n            <div>Wait...</div>\n        );\n    }\n}\n\nexport default AutoEdit;","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass JournalTable extends Component {\n    state = {\n        journalList: Array(),\n        mounted: false\n    }\n\n    url = '/journal'\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery('/journal')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    journalList: Array.from(json),\n                    mounted: true\n\n                });\n            });\n    }\n\n    handleDelete(id) {\n        const {doQuery} = this.props;\n\n        doQuery(this.url + `/${id}`, {\n            method: \"DELETE\"\n        }).then(() => {\n            this.setState(prevState => {\n                return {journalList: prevState.journalList.filter(jornal => jornal.id !== id)};\n            });\n        });\n    }\n\n    render() {\n        const {mounted, journalList} = this.state;\n\n        return mounted\n            ? (\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th><abbr title=\"Position\">Timeout</abbr></th>\n                        <th><abbr title=\"Played\">Timein</abbr></th>\n                        <th><abbr title=\"Won\">Auto</abbr></th>\n                        <th><abbr title=\"Won\">Route</abbr></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {journalList.map(journal =>\n                        <tr key={journal.id}>\n                            <th>{journal.timeout.toString()}</th>\n                            <th>{journal.timein.toString()}</th>\n                            <th>{journal.auto.color} {journal.auto.mark} {journal.auto.num}</th>\n                            <th>{journal.route.name}</th>\n                            <th><Link to={`${this.url}_edit/${journal.id}`}>Edit</Link></th>\n                            <th><a onClick={() => this.handleDelete(journal.id)}>Delete</a></th>\n                        </tr>)}\n                    </tbody>\n                </table>\n            ) : (\n                <div>Wait...</div>\n            );\n    }\n}\n\nexport default JournalTable;","import React, {Component, Fragment} from \"react\";\n\nclass JournalCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleTimeoutChange = this.handleTimeoutChange.bind(this);\n        this.handleTimeinChange = this.handleTimeinChange.bind(this);\n        this.handleAutoChange = this.handleAutoChange.bind(this);\n        this.handleRouteChange = this.handleRouteChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        autoList: Array(),\n        routeList: Array(),\n        timein: '',\n        timeout: '',\n        autoID: '',\n        routeID: '',\n    };\n\n    handleTimeoutChange(elem) {\n        this.setState({\n            timein: elem.target.value\n        })\n    }\n\n    handleTimeinChange(elem) {\n        this.setState({\n            timeout: elem.target.value\n        })\n    }\n\n    handleAutoChange(elem) {\n        this.setState({\n            autoID: elem.target.value\n        })\n    }\n\n    handleRouteChange(elem) {\n        this.setState({\n            routeID: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n\n        const {autoList, routeList, timein, timeout, autoID, routeID} = this.state;\n\n        const json = JSON.stringify({\n            timein: new Date(timein),\n            timeout: new Date(timeout),\n            auto: autoList.find(auto => auto.id == autoID),\n            route: routeList.find(route => route.id == routeID)\n        });\n\n        doQuery(`/journal`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery('/auto')\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    autoList: array,\n                    autoID: array.length === 0 ? '' : array[0].id\n                });\n            });\n\n        doQuery(\"/route\")\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    routeList: array,\n                    routeID: array.length === 0 ? '' : array[0].id\n                });\n            });\n    }\n\n    render() {\n        const {autoList, routeList} = this.state;\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Timeout</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"datetime-local\"\n                               onChange={this.handleTimeoutChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Timein</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"datetime-local\"\n                               onChange={this.handleTimeinChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Auto</label>\n                    <div className=\"control\">\n                        <select className=\"select\"\n                                onChange={this.handleAutoChange}\n                                required={true}\n                        >\n                            {autoList.map(auto =>\n                                <option key={auto.id} value={auto.id}>{auto.color} {auto.mark} {auto.num}</option>)}\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Route</label>\n                    <div className=\"control\">\n                        <select className=\"select\"\n                                onChange={this.handleRouteChange}\n                                required={true}\n                        >\n                            {routeList.map(route =>\n                                <option key={route.id} value={route.id}>{route.name}</option>)}\n                        </select>\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Создать\"/>\n            </form>\n        )\n    }\n}\n\nexport default JournalCreate;","import React, {Component} from \"react\";\n\nclass JournalEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleTimeoutChange = this.handleTimeoutChange.bind(this);\n        this.handleTimeinChange = this.handleTimeinChange.bind(this);\n        this.handleAutoChange = this.handleAutoChange.bind(this);\n        this.handleRouteChange = this.handleRouteChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        journal: null,\n        autoList: Array(),\n        routeList: Array(),\n        timein: '',\n        timeout: '',\n        autoID: '',\n        routeID: '',\n        mounted: false\n    };\n\n    handleTimeoutChange(elem) {\n        this.setState({\n            timein: elem.target.value\n        })\n    }\n\n    handleTimeinChange(elem) {\n        this.setState({\n            timeout: elem.target.value\n        })\n    }\n\n    handleAutoChange(elem) {\n        this.setState({\n            autoID: elem.target.value\n        })\n    }\n\n    handleRouteChange(elem) {\n        this.setState({\n            routeID: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n\n        const {autoList, routeList, timein, timeout, autoID, routeID, journal} = this.state;\n\n        const json = JSON.stringify({\n            timein: new Date(timein),\n            timeout: new Date(timeout),\n            auto: autoList.find(auto => auto.id == autoID),\n            route: routeList.find(route => route.id == routeID)\n        });\n\n        doQuery(`/journal/${journal.id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    componentDidMount() {\n        const {doQuery, id} = this.props;\n\n        doQuery(`/journal/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    journal: json,\n                    mounted: true,\n                    autoID: json.auto.id,\n                    routeID: json.route.id,\n                });\n            })\n\n        doQuery('/auto')\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    autoList: array\n                });\n            });\n\n        doQuery(\"/route\")\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    routeList: array\n                });\n            });\n    }\n\n    render() {\n        const {autoList, routeList, journal, mounted} = this.state;\n        return mounted ? (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label\">Timeout</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"datetime-local\"\n                               onChange={this.handleTimeoutChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Timein</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"datetime-local\"\n                               onChange={this.handleTimeinChange}\n                               required={true}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Auto</label>\n                    <div className=\"control\">\n                        <select className=\"select\"\n                                onChange={this.handleAutoChange}\n                                required={true}\n                        >\n                            {autoList.map(auto =>\n                                <option key={auto.id} value={auto.id}\n                                        selected={journal.auto.id === auto.id}>{auto.color} {auto.mark} {auto.num}</option>)}\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Route</label>\n                    <div className=\"control\">\n                        <select className=\"select\"\n                                onChange={this.handleRouteChange}\n                                required={true}\n                        >\n                            {routeList.map(route =>\n                                <option key={route.id} value={route.id}\n                                        selected={journal.route.id === route.id}>{route.name}</option>)}\n                        </select>\n                    </div>\n                </div>\n\n                <input className=\"button is-primary\" type=\"submit\" value=\"Создать\"/>\n            </form>\n        ) : (\n            <div>kek</div>\n        );\n    }\n}\n\nexport default JournalEdit;","import React, {Component, Fragment} from \"react\";\nimport './RegistrationPage.css';\n\nclass RegistrationPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleUsername = this.handleUsername.bind(this);\n        this.handlePassword = this.handlePassword.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        username: '',\n        password: '',\n    }\n\n    handleSubmit() {\n        const {doQuery} = this.props;\n        const {username, password} = this.state;\n\n        const user = {\n            username: username,\n            password: password,\n            roles: ['USER']\n        };\n\n        doQuery('/user', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": 'application/json'\n            },\n            body: JSON.stringify(user)\n        });\n    }\n\n    handleUsername(elem) {\n        this.setState({\n            username: elem.target.value\n        });\n    }\n\n    handlePassword(elem) {\n        this.setState({\n            password: elem.target.value\n        });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"title\">\n                    Registration\n                </div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <input className=\"input is-primary\" type=\"text\" id=\"username\" name=\"username\"\n                                   placeholder=\"username\"\n                                   onChange={this.handleUsername}\n                                   required={true}/>\n                        </div>\n                    </div>\n\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <input className=\"input is-primary\" type=\"password\" id=\"password\" name=\"password\"\n                                   placeholder=\"password\"\n                                   onChange={this.handlePassword}\n                                   required={true}/>\n                        </div>\n                    </div>\n\n                    <div className=\"field\">\n                        <button className=\"button is-primary\" type=\"submit\">Зарегистрироваться</button>\n                    </div>\n                </form>\n            </Fragment>\n        );\n    }\n}\n\nexport default RegistrationPage;","import React, {Component, Fragment} from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Navbar from \"./Navbar/Navbar.jsx\";\nimport EntityPage from \"./EntityPage/EntityPage.jsx\";\nimport CreatePage from './CreatePage/CreatePage.jsx';\nimport EditPage from \"./EditPage/EditPage.jsx\";\n\nimport PersonnelTable from './PersonnelTable/PersonnelTable.jsx';\nimport PersonnelEdit from \"./PersonnelEdit/PersonnelEdit\";\nimport PersonnelCreate from \"./PersonnelCreate/PersonnelCreate.jsx\";\n\nimport RouteTable from \"./RouteTable/RouteTable\";\nimport RouteCreate from \"./RouteCreate/RouteCreate.jsx\";\n\nimport './App.css';\nimport 'bulma'\nimport RouteEdit from \"./RouteEdit/RouteEdit\";\nimport AutoTable from \"./AutoTable/AutoTable\";\nimport AutoCreate from \"./AutoCreate/AutoCreate\";\nimport AutoEdit from \"./AutoEdit/AutoEdit\";\nimport JournalTable from \"./JournalTable/JournalTable\";\nimport JournalCreate from \"./JournalCreate/JournalCreate\";\nimport JournalEdit from \"./JournalEdit/JournalEdit\";\nimport RegistrationPage from \"./RegistrationPage/RegistrationPage\";\n\nclass App extends Component {\n    state = {\n        user: null,\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {doQuery} = this.props;\n\n        doQuery('/user')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    user: json\n                })\n            })\n            .catch(() => {\n                this.setState({\n                    user: null\n                })\n            })\n            .finally(() => {\n                this.setState({\n                    mounted: true\n                })\n            });\n    }\n\n    render() {\n        const {doQuery} = this.props;\n        const {mounted, user} = this.state;\n\n        return mounted ? (\n            <Fragment>\n                <Router>\n                    <header>\n                        <Navbar user={user}/>\n                    </header>\n                    <main>\n                        {user !== null ? (\n                            <Switch>\n                                <Route path=\"/personnel_edit/:id\" render={({match}) => {\n                                    return (<EditPage name=\"Personnel\"\n                                                      children={<PersonnelEdit id={match.params.id}\n                                                                               doQuery={doQuery}/>}/>);\n                                }}/>\n\n                                <Route path=\"/personnels_create\">\n                                    <CreatePage name=\"Personnel\"\n                                                children={<PersonnelCreate doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/personnels\">\n                                    <EntityPage name=\"Personnel\" url=\"/personnels\"\n                                                children={<PersonnelTable doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/route_edit/:id\" render={({match}) => {\n                                    return (<EditPage name=\"Route\"\n                                                      children={<RouteEdit id={match.params.id}\n                                                                           doQuery={doQuery}/>}/>);\n                                }}/>\n\n                                <Route path=\"/routes_create\">\n                                    <CreatePage name=\"Route\"\n                                                children={<RouteCreate doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/routes\">\n                                    <EntityPage name=\"Route\" url=\"/routes\"\n                                                children={<RouteTable doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/auto_edit/:id\" render={({match}) => {\n                                    return (<EditPage name=\"Auto\"\n                                                      children={<AutoEdit id={match.params.id}\n                                                                          doQuery={doQuery}/>}/>);\n                                }}/>\n\n                                <Route path=\"/autos_create\">\n                                    <CreatePage name=\"Auto\"\n                                                children={<AutoCreate doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/autos\">\n                                    <EntityPage name=\"Auto\" url=\"/autos\"\n                                                children={<AutoTable doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/journal_edit/:id\" render={({match}) => {\n                                    return (<EditPage name=\"Journal\"\n                                                      children={<JournalEdit id={match.params.id}\n                                                                             doQuery={doQuery}/>}/>);\n                                }}/>\n\n                                <Route path=\"/journals_create\">\n                                    <CreatePage name=\"Journal\"\n                                                children={<JournalCreate doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/journals\">\n                                    <EntityPage name=\"Journal\" url=\"/journals\"\n                                                children={<JournalTable doQuery={doQuery}/>}/>\n                                </Route>\n\n                                <Route path=\"/\">\n                                    Вы авторизованы.\n                                </Route>\n                            </Switch>\n                        ) : (\n                            <Switch>\n                                <Route path=\"/registration\">\n                                    <RegistrationPage doQuery={doQuery}/>\n                                </Route>\n\n                                <Route path=\"/\">\n                                    Привет, авторизуйтесь.\n                                </Route>\n                            </Switch>\n                        )}\n                    </main>\n                </Router>\n            </Fragment>\n        ) : (\n            <div>\n\n            </div>\n        );\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {doQuery} from './service.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  doQuery={doQuery}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}